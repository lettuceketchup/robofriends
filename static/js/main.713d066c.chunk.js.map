{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","robot","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","marginBottom","backgroundColor","yellowgreen","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","searchedRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","paylaod","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.713d066c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='tc hover-bg-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt='pic' />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React, { Fragment } from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <Fragment>\r\n            {\r\n                robots.map((robot) => {\r\n                    return (\r\n                        <Card\r\n                            key={robot.id}\r\n                            name={robot.name}\r\n                            id={robot.id}\r\n                            email={robot.email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div>\r\n            <input\r\n                aria-label='Search Robots'\r\n                className='pa3 ba b--blue bg-washed-blue'\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid aqua', height: '75vh'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops. This is not good.</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport { yellowgreen } from 'color-name';\r\n\r\nclass CounterButton extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.count !== nextState.count) {\r\n            return true\r\n        }\r\n        return false;\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return { count: state.count + 1 }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button style={{marginBottom: 8, backgroundColor: yellowgreen}} color={this.props.color} onClick={this.updateCount} >\r\n                Count: {this.state.count}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className='f1'>Robofriends</h1>\r\n                <CounterButton color={'red'} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport Header from '../components/Header';\r\nimport './App.css'\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => ({\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n})\r\n\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots()\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const searchedRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        });\r\n        return (\r\n            <div className='tc'>\r\n                <Header />\r\n                <SearchBox searchChange={onSearchChange} />\r\n                <Scroll>\r\n                    { isPending ? <h1>Loading</h1> :\r\n                        <ErrorBoundary>\r\n                            <CardList robots={searchedRobots} />\r\n                        </ErrorBoundary>\r\n                    }\r\n                </Scroll>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.paylaod, isPending: false });\r\n        default:\r\n            return state;\r\n    }\r\n}","import './wdyr';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\n// import { createLogger } from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport 'tachyons';\r\n\r\n// const logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store} >\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}